/**
 * 
 */
package com.alok.dp.knapsack.unbounded;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

/**
 * @author Alok Soni
 * 
 */

/***************** Question ***********************/

/*******
	Given two strings str1 and str2 and below operations that can performed on str1. Find minimum number of edits (operations) required to convert ‘str1’ into ‘str2’.
	
	Insert
	Remove
	Replace
	All of the above operations are of equal cost.
	
	Examples:
	
	Input:   str1 = "geek", str2 = "gesek"
	Output:  1
	We can convert str1 into str2 by inserting a 's'.
	
	Input:   str1 = "cat", str2 = "cut"
	Output:  1
	We can convert str1 into str2 by replacing 'a' with 'u'.
	
	Input:   str1 = "sunday", str2 = "saturday"
	Output:  3
	Last three and first characters are same.  We basically
	need to convert "un" to "atur".  This can be done using
	below three operations. 
	Replace 'n' with 'r', insert t, insert a
	https://www.geeksforgeeks.org/edit-distance-dp-5/
**************/

public class LenvenshteinDistanceProblem {
	public static void main(String[] args) {
		String str1 = "biting";
		String str2 = "mitten";
		String result = getLCM(str1, str2);
		System.out.println("Longest common subsequence is : "+result);
		int diff1 = str1.length() -  result.length();
		int diff2 = str2.length() - result.length();
		int commonCharCount = 0;
		if(!result.isEmpty()) {
			int i=0,j=0;
			String str = "";
			while(i != str2.length() || j != result.length()) {
				if(str2.charAt(i) == result.charAt(j)) {
					i++;
					j++;
				}else {
					str = str + str2.charAt(i);
					i++;
				}
			}
			
			commonCharCount = commonCharCount - diff2;
		}
		if(str2.length() >= str1.length()) {
			int insertion = diff2 - diff1;
			int edition = commonCharCount != 0 ? commonCharCount + diff1 : diff1;
			System.out.println("Operation count : is " + (insertion + edition));
		}else {
			int deletion = diff1 - diff2;
			int edition = commonCharCount != 0 ? commonCharCount + diff2 : diff2;
			System.out.println("Operation count : is " + (deletion + edition));
		}
		
		
	}
	
	private static String getLCM(String str1, String str2) {
		int[][] t = new int[str1.length()+1][str2.length()+1];
		
		for(int i=0; i<str1.length()+1; i++) {
			for(int j=0; j<str2.length()+1; j++) {
				if(i==0 || j == 0) {
					t[i][j] = 0;
				}else if(str1.charAt(i-1) == str2.charAt(j-1)) {
					t[i][j] = 1 + t[i-1][j-1];
				}else {
					t[i][j] = Integer.max(t[i][j-1], t[i-1][j]);
				}
			}
		}
		
		String result = "";
		int i = str1.length(), j = str2.length();
		while(i > 0 && j > 0) {
			if(str1.charAt(i-1) == str2.charAt(j-1)) {
				result = str1.charAt(i-1) + result;
				i--;
				j--;
			}else if(t[i-1][j] > t[i][j-1]) {
				i--;
			}else {
				j--;
			}
		}
		return result;
	}
}
