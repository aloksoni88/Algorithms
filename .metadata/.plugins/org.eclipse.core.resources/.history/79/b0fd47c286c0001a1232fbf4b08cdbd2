/**
 * 
 */
package com.alok.dp.knapsack.unbounded;

/**
 * @author Alok Soni
 *Question : Print Longest common subsequence
 * LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH”.
   LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB”
 */
public class PrintLongestCommonSubsequence {
	public static void main(String[] args) {
		String inputStr1 = "lskjflskd";
		String inputStr2 = "skjdfhsjdf+";
		//StringBuffer lcm = lcmRecursive(inputStr1,inputStr2,inputStr1.length(),inputStr2.length(),new StringBuffer(""));
		String lcm = lcmOptimized(inputStr1,inputStr2);
		System.out.println("Longest common subsequence is : " + lcm);
	}
	
	private static String lcmOptimized(String str1, String str2) {
		String[][] t = new String[str1.length()+1][str2.length()+1];
		for(int i=0; i<str1.length()+1; i++) {
			for(int j=0; j<str2.length()+1; j++) {
				if(i==0 || j==0) {
					t[i][j] = "";
				}else if(str1.charAt(i-1) == str2.charAt(j-1)) {
					char c = str1.charAt(i-1);
					if(t[i-1][j-1] != String.valueOf(c)) {
						if(t[i][j] == null) {
							t[i][j] = t[i-1][j-1] + str1.charAt(i-1);	
						}else {
							t[i][j] = t[i][j] + t[i-1][j-1] + str1.charAt(i-1);
						}
						
					}else {
						if(t[i][j] == null) {
							t[i][j] = str1.charAt(i-1)+"";
						}else {
							t[i][j] = t[i][j] + str1.charAt(i-1)+"";
						}
					}
				}else {
					if(t[i][j] == null) {
						t[i][j] = t[i-1][j-1] == null ? "": t[i-1][j-1];	
					}else {
						t[i][j] = t[i][j] + t[i-1][j-1] == null ? "": t[i-1][j-1];
					}
					
				}
			}
		}
		return t[str1.length()][str2.length()];
	}
	
	private static StringBuffer lcmRecursive(String str1, String str2, int m, int n, StringBuffer lcm) {
		if(m == 0 || n == 0) {
			return lcm;
		}
		if(str1.charAt(m-1) == str2.charAt(n-1)) {
			lcmRecursive(str1, str2, m-1, n-1,lcm);
			char c= str1.charAt(m-1);
			if(!lcm.toString().contains(c+"")) {
				lcm.append(c);
			}
		}else {
			lcmRecursive(str1, str2, m, n-1,lcm);
			lcmRecursive(str1, str2, m-1, n,lcm);
		}
		return lcm;
	}
	
}
