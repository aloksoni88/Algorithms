/**
 * 
 */
package com.alok.dp.knapsack.unbounded;

/**
 * @author Alok Soni
 * Question
 * Given two strings ‘X’ and ‘Y’, find the length of the longest common substring.
	Examples :
	
	Input : X = “GeeksforGeeks”, y = “GeeksQuiz”
	Output : 5
	The longest common substring is “Geeks” and is of length 5.
	
	Input : X = “abcdxyz”, y = “xyzabcd”
	Output : 4
	The longest common substring is “abcd” and is of length 4.
	
	Input : X = “zxabcdezy”, y = “yzabcdezx”
	Output : 6
	The longest common substring is “abcdez” and is of length 6.
	
	https://www.geeksforgeeks.org/longest-common-substring-dp-29/
 */
public class PrintLongestCommonSubstring {
	public static void main(String[] args) {
		String inputStr1 = "AGGTAB";
		String inputStr2 = "GXTXAYB";
		//StringBuffer lcm = lcmRecursive(inputStr1,inputStr2,inputStr1.length(),inputStr2.length(),new StringBuffer(""));
		StringBuffer lcm = lcmOptimized(inputStr1,inputStr2);
		System.out.println("Longest common substring is : " + lcm);
	}
	
	private static StringBuffer lcmOptimized(String str1, String str2) {
		int[][] t = new int[str1.length()+1][str2.length()+1];
		for(int i=0; i<str1.length()+1; i++) {
			for(int j=0; j<str2.length()+1; j++) {
				if(i==0 || j==0) {
					t[i][j] = 0;
				}else if(str1.charAt(i-1) == str2.charAt(j-1)) {
					t[i][j] = 1 + t[i-1][j-1];
				}else {
					t[i][j] = Math.max(t[i][j-1], t[i-1][j]);
				}
			}
		}
		int i = str1.length(), j = str2.length();
		String result = "";
		while(i> 0 && j>0) {
			if(str1.charAt(i-1) == str2.charAt(j-1)) {
				result = result + str1.charAt(i-1);
				i--;
				j--;
			}else if(t[i-1][j] > t[i][j-1]) {
				i--;
			}else {
				j--;
			}
		}
		return new StringBuffer(result).reverse();
	}
	
	private static StringBuffer lcmRecursive(String str1, String str2, int m, int n, StringBuffer lcm) {
		if(m == 0 || n == 0) {
			return lcm;
		}
		if(str1.charAt(m-1) == str2.charAt(n-1)) {
			lcmRecursive(str1, str2, m-1, n-1,lcm);
			char c= str1.charAt(m-1);
			if(!lcm.toString().contains(c+"")) {
				lcm.append(c);
			}
		}else {
			lcmRecursive(str1, str2, m, n-1,lcm);
			lcmRecursive(str1, str2, m-1, n,lcm);
		}
		return lcm;
	}
	
}
